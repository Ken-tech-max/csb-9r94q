{"version":3,"sources":["store.ts","ducks/auth.ts","ducks/user.ts","hooks/useThunkDispatch.ts","screens/UserScreen.tsx","screens/AuthScreen.tsx","App.tsx","AppWrapper.tsx","index.tsx"],"names":["initialState","accessTokenReceived","createAction","passwordAuth","password","dispatch","Promise","resolve","setTimeout","token","then","handleActions","state","payload","accessToken","selectors","getAccessToken","auth","userReceived","getUser","getState","id","name","user","logger","createLogger","diff","middlewares","thunkMiddleware","next","action","console","groupCollapsed","type","trace","groupEnd","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","window","devToolsExtension","f","useThunkDispatch","useDispatch","UserScreen","thunkDispatch","useSelector","userSelectors","useState","loading","setLoading","useEffect","userActions","finally","className","AuthScreen","setPassword","style","styles","inputContainer","value","onChange","event","target","onClick","authActions","disabled","marginBottom","App","userAccessTokenReceived","authSelectors","AppWrapper","rootElement","document","getElementById","render"],"mappings":"6mBA+B8CA,E,mFCxBjCC,EAAsBC,YAFL,4BAIjBC,EAAe,SAACC,GAC3B,OAAO,SACLC,GAGA,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OACxBC,YAAW,kBAAMD,EAAQ,CAAEE,MAAO,mBAAmB,QACrDC,MAAK,YAAqB,IAAlBD,EAAiB,EAAjBA,MAER,OADAJ,EAASJ,EAAoBQ,IACtBA,OASEE,cAAc,eAtBC,4BAwBD,SACvBC,EADuB,GAGR,IADbC,EACY,EADZA,QAEF,OAAO,2BACFD,GADL,IAEEE,YAAaD,OAZW,CAC9BC,YAAa,OAkBFC,EAAY,CACvBC,eAAgB,kBAAM,SAACJ,GACrB,OAAOA,EAAMK,KAAKH,cAEpBb,oBAAqB,kBAAM,SAACW,GAC1B,OAAiC,MAA1BA,EAAMK,KAAKH,eCtCTI,EAAehB,YAFN,qBAITiB,EAAU,WACrB,OAAO,SACLd,EACAe,GAIA,OAAO,IAAId,SAAQ,SAAAC,GAAO,OACxBC,YAAW,kBAAMD,EAAQ,CAAEc,GAAI,IAAKC,KAAM,WAAW,QACrDZ,MAAK,SAACa,GAEN,OADAlB,EAASa,EAAaK,IACfA,OASEZ,cAAc,eAxBP,qBA0BD,SAACC,EAAD,GAAoD,IAA/BC,EAA8B,EAA9BA,QACpC,OAAO,2BACFD,GADL,IAEEW,KAAMV,OATkB,CAC9BU,KAAM,OAeKR,EAAY,CACvBI,QAAS,kBAAM,SAACP,GACd,OAAOA,EAAMW,KAAKA,QFtChBC,EAASC,uBAAa,CAC1BC,MAAM,IAUFC,EAAc,CAACC,IAPS,kBAAM,SAACC,GAAD,OAAe,SAACC,GAIlD,OAHAC,QAAQC,eAAR,gBAAgCF,EAAOG,OACvCF,QAAQG,QACRH,QAAQI,WACDN,EAAKC,MAG+CN,GAQvDY,EAAcC,YAAgB,CAClCpB,OACAM,SAGWe,EACJC,YACLH,EACApC,EACAwC,YACEC,IAAe,WAAf,EAAmBd,GACnBe,OAAOC,kBAAoBD,OAAOC,oBAAsB,SAACC,GAAD,OAAiBA,K,eGxBhEC,EAFU,kBAAWC,eCJrB,SAASC,IACtB,IAAMC,EAAgBH,IAChBtB,EAAO0B,YAAYC,EAAc/B,WACvC,EAA8BgC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAKA,OAJAC,qBAAU,WAERN,EAAcO,EAAYpC,WAAWqC,SAAQ,kBAAMH,GAAW,QAC7D,CAACL,IAEF,yBAAKS,UAAU,aACb,oCACCL,EAAU,0CAAsB,mCAAK7B,QAAL,IAAKA,OAAL,EAAKA,EAAMD,OCbnC,SAASoC,IACtB,IAAMV,EAAgBH,IACtB,EAAgCM,mBAAS,IAAzC,mBAAO/C,EAAP,KAAiBuD,EAAjB,KACA,EAA8BR,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAQA,OACE,yBAAKI,UAAU,aACb,qCACA,4DACA,yBAAKG,MAAOC,EAAOC,gBACjB,2BAAOC,MAAO3D,EAAU4D,SAZL,SAACC,GACxBN,EAAYM,EAAMC,OAAOH,WAavB,4BAAQI,QAXS,WACnBd,GAAW,GACXL,EAAcoB,EAAYjE,aAAaC,KASNiE,SAAUjB,GACtCA,EAAU,WAAa,UAMhC,IAAMS,EAAS,CACbC,eAAgB,CACdQ,aAAc,KCzBH,SAASC,IACtB,IAAMC,EAA0BvB,YAC9BwB,EAAcxE,uBAEhB,OAAO,wCAAIuE,EAA0B,kBAACzB,EAAD,MAAiB,kBAACW,EAAD,OCNzC,SAASgB,IACtB,OACE,kBAAC,IAAD,CAAUpC,MAAOA,GACf,kBAACiC,EAAD,OCHN,IAAMI,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,gBAACJ,EAAD,MAAgBC,K","file":"static/js/main.79b2780d.chunk.js","sourcesContent":["import { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\n\nimport auth from \"./ducks/auth\";\nimport user from \"./ducks/user\";\n\nconst logger = createLogger({\n  diff: true\n});\n\nconst traceActionMiddleware = () => (next: any) => (action: any): any => {\n  console.groupCollapsed(`Trace ${action.type}`);\n  console.trace();\n  console.groupEnd();\n  return next(action);\n};\n\nconst middlewares = [thunkMiddleware, traceActionMiddleware, logger];\n\ndeclare global {\n  interface Window {\n    devToolsExtension: any;\n  }\n}\n\nconst rootReducer = combineReducers({\n  auth,\n  user\n});\n\nexport const store = (function configureStore(initialState): any {\n  return createStore(\n    rootReducer,\n    initialState,\n    compose(\n      applyMiddleware(...middlewares),\n      window.devToolsExtension ? window.devToolsExtension() : (f: any): any => f\n    )\n  );\n})();\n","import { createAction, handleActions } from \"redux-actions\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport { RootState, AuthState } from \"../types/store\";\n\nconst ACCESS_TOKEN_RECEIVED = \"auth/accessTokenReceived\";\n\nexport const accessTokenReceived = createAction(ACCESS_TOKEN_RECEIVED);\n\nexport const passwordAuth = (password: string) => {\n  return (\n    dispatch: ThunkDispatch<AuthState, void, Action>\n  ): Promise<string> => {\n    // Simulate API request, in real app you pass password\n    return new Promise(resolve =>\n      setTimeout(() => resolve({ token: \"jsdm22asdfll\" }), 2000)\n    ).then(({ token }: any) => {\n      dispatch(accessTokenReceived(token));\n      return token;\n    });\n  };\n};\n\nconst initialState: AuthState = {\n  accessToken: null\n};\n\nexport default handleActions(\n  {\n    [ACCESS_TOKEN_RECEIVED]: (\n      state: AuthState,\n      { payload }: any\n    ): AuthState => {\n      return {\n        ...state,\n        accessToken: payload\n      };\n    }\n  },\n  initialState\n);\n\nexport const selectors = {\n  getAccessToken: () => (state: RootState): string | null => {\n    return state.auth.accessToken;\n  },\n  accessTokenReceived: () => (state: RootState): boolean => {\n    return state.auth.accessToken != null;\n  }\n};\n","import { createAction, handleActions } from \"redux-actions\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport { RootState, UserState } from \"../types/store\";\nimport { User } from \"../types/user\";\n// import { authSelectors } from \".\";\n\nconst USER_RECEIVED = \"user/userReceived\";\n\nexport const userReceived = createAction(USER_RECEIVED);\n\nexport const getUser = () => {\n  return (\n    dispatch: ThunkDispatch<UserState, void, Action>,\n    getState: () => RootState\n  ): Promise<User> => {\n    // const accessToken = authSelectors.getAccessToken()(getState());\n    // Simulate API request, in real app you pass access token\n    return new Promise(resolve =>\n      setTimeout(() => resolve({ id: \"1\", name: \"Adam\" }), 1000)\n    ).then((user: any) => {\n      dispatch(userReceived(user));\n      return user;\n    });\n  };\n};\n\nconst initialState: UserState = {\n  user: null\n};\n\nexport default handleActions(\n  {\n    [USER_RECEIVED]: (state: UserState, { payload }: any): UserState => {\n      return {\n        ...state,\n        user: payload\n      };\n    }\n  },\n  initialState\n);\n\nexport const selectors = {\n  getUser: () => (state: RootState): User | null => {\n    return state.user.user;\n  }\n};\n","import { useDispatch } from \"react-redux\";\n\nimport { store } from \"../store\";\n\n/* See comment in definition of useDispatch:\n\n * Note for `redux-thunk` users: the return type of the returned `dispatch` functions for thunks is incorrect.\n * However, it is possible to get a correctly typed `dispatch` function by creating your own custom hook typed\n * from the store's dispatch function like this: `const useThunkDispatch = () => useDispatch<typeof store.dispatch>();`\n\n */\nconst useThunkDispatch = (): any => useDispatch<typeof store.dispatch>();\n\nexport default useThunkDispatch;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useThunkDispatch from \"../hooks/useThunkDispatch\";\nimport { userActions } from \"../ducks\";\nimport \"../styles.css\";\nimport { userSelectors } from \"../ducks\";\n\nexport default function UserScreen() {\n  const thunkDispatch = useThunkDispatch();\n  const user = useSelector(userSelectors.getUser());\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // you can use thunkDispath not only for async actions but for sync actions too (like USER_RECEIVED action)\n    thunkDispatch(userActions.getUser()).finally(() => setLoading(false));\n  }, [thunkDispatch]);\n  return (\n    <div className=\"Container\">\n      <h1>User</h1>\n      {loading ? <h2>Loading...</h2> : <h2>{user?.name}</h2>}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport useThunkDispatch from \"../hooks/useThunkDispatch\";\nimport { authActions } from \"../ducks\";\nimport \"../styles.css\";\n\nexport default function AuthScreen() {\n  const thunkDispatch = useThunkDispatch();\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const onChangePassword = (event: any) => {\n    setPassword(event.target.value);\n  };\n  const onLoginPress = () => {\n    setLoading(true);\n    thunkDispatch(authActions.passwordAuth(password));\n  };\n  return (\n    <div className=\"Container\">\n      <h1>Login</h1>\n      <h2>Input password (any symbols)</h2>\n      <div style={styles.inputContainer}>\n        <input value={password} onChange={onChangePassword} />\n      </div>\n      <button onClick={onLoginPress} disabled={loading}>\n        {loading ? \"Login...\" : \"Login\"}\n      </button>\n    </div>\n  );\n}\n\nconst styles = {\n  inputContainer: {\n    marginBottom: 10\n  }\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./styles.css\";\nimport { authSelectors } from \"./ducks\";\nimport UserScreen from \"./screens/UserScreen\";\nimport AuthScreen from \"./screens/AuthScreen\";\n\nexport default function App() {\n  const userAccessTokenReceived = useSelector(\n    authSelectors.accessTokenReceived()\n  );\n  return <> {userAccessTokenReceived ? <UserScreen /> : <AuthScreen />}</>;\n}\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport App from \"./App\";\n\nexport default function AppWrapper() {\n  return (\n    <Provider store={store}>\n      <App />\n    </Provider>\n  );\n}\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport AppWrapper from \"./AppWrapper\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<AppWrapper />, rootElement);\n"],"sourceRoot":""}